; Test suite for MPB.  This file runs MPB for a variety of cases,
; and compares it against known results from previous versions.  If the
; answers aren't sufficiently close, it exits with an error.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Some general setup and utility routines first:

(set! tolerance 1e-9) ; use a low tolerance to get consistent results

; keep track of some error statistics:
(define min-err infinity)
(define max-err 0)
(define max-abs-err 0)
(define sum-err 0)
(define sum-abs-err 0)
(define num-err 0)

; function to check if two results are sufficently close:
(define-param check-tolerance 1e-4)
(define (almost-equal? x y)
  (if (> (abs x) 1e-3)
      (let ((err (/ (abs (- x y)) (* 0.5 (+ (abs x) (abs y)))))
	    (abserr (abs (- x y))))
	(set! min-err (min min-err err))
	(set! max-err (max max-err err))
	(set! max-abs-err (max max-abs-err abserr))
	(set! num-err (+ num-err 1))
	(set! sum-err (+ sum-err err))
	(set! sum-abs-err (+ sum-abs-err abserr))))
  (or 
   (< (abs (- x y)) (* 0.5 check-tolerance (+ (abs x) (abs y))))
   (and (< (abs x) 1e-3) (< (abs (- x y)) 1e-3))))

; Convert a list l into a list of indices '(1 2 ...) of the same length.
(define (indices l)
  (if (null? l)
      '()
      (cons 1 (map (lambda (x) (+ x 1)) (indices (cdr l))))))

; Check whether the freqs returned by a run (all-freqs) match correct-freqs.
(define (check-freqs correct-freqs)
  (define (check-freqs-aux fc-list f-list ik)
    (define (check-freqs-aux2 fc f ib)
      (if (not (almost-equal? fc f))
	  (error "check-freqs: k-point " ik " band " ib " is "
		 f " instead of " fc)))
    (if (= (length fc-list) (length f-list))
	(map check-freqs-aux2 fc-list f-list (indices f-list))
	(error "check-freqs: wrong number of bands at k-point " ik)))
  (if (= (length correct-freqs) (length all-freqs))
      (begin
	(map check-freqs-aux correct-freqs all-freqs (indices all-freqs))
	(print "check-freqs: PASSED\n"))
      (error "check-freqs: wrong number of k-points")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(if (not (using-mpi?)) ; MPI code currently doesn't support 1d systems
(begin

; Use a lower tolerance for the 1d cases, since it is cheap; otherwise,
; the Bragg-sine case perennially causes problems.
(set! tolerance (/ tolerance 10000))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; First test: a simple 1d Bragg mirror:

(print
 "**************************************************************************\n"
 " Test case: 1d quarter-wave stack.\n"
 "**************************************************************************\n"
)

(set! geometry (list (make cylinder (material (make dielectric (epsilon 9.0)))
			   (center 0) (axis 1)
			   (radius infinity) (height 0.25))))
(set! k-points (interpolate 4 (list (vector3 0 0 0) (vector3 0.5 0 0))))
(set! grid-size (vector3 32 1 1))
(set! num-bands 8)

(define correct-freqs '((0.0 0.666384282528916 0.666667518031828 1.33099337665679 1.3333608767284 1.99161980173025 2.00024302642562 2.64509378520832) (0.0574931097997551 0.608787973096119 0.724373977055668 1.27359663941028 1.39097797892595 1.93584941706027 2.05633589084835 2.59377005482917) (0.113352271592982 0.552761237115777 0.780756082813777 1.21672824612875 1.44856381682192 1.87756171149864 2.11568713317692 2.53392260905136) (0.164802158007456 0.501201811770547 0.832987385247274 1.16417795261225 1.50250265212664 1.82314371802974 2.17224997337128 2.47690271740002) (0.205536502065922 0.460405353660881 0.874781086949201 1.12220337812548 1.54664162749105 1.77873062187023 2.22033216569935 2.42854622021096) (0.222450993191969 0.44347071815372 0.89236781440248 1.10455805248897 1.56579373692671 1.75948932731251 2.24248043100853 2.40631190043537)))

(run-tm)
(check-freqs correct-freqs)

(run-te)
(check-freqs correct-freqs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Second test: a less-simple 1d Bragg mirror, consisting of a sinusoidally
; varying dielectric index (see also bragg-sine.ctl):

(print
 "**************************************************************************\n"
 " Test case: 1d sinusoidal Bragg mirrors.\n"
 "**************************************************************************\n"
)

(define pi (* 4 (atan 1))) ; 3.14159...
(define (eps-func p)
  (make dielectric (index (+ 2 (cos (* 2 pi (vector3-x p)))))))
(set! default-material (make material-function (material-func eps-func)))

(set! k-points (interpolate 9 (list (vector3 0 0 0) (vector3 0.5 0 0))))
(set! grid-size (vector3 32 1 1))
(set! num-bands 8)

(run-tm)
(check-freqs '((0.0 0.46064827521806 0.54242773981687 0.968586586361065 1.01617062659998 1.48337333794746 1.48386583676094 1.96763768634052) (0.0231424888786126 0.454293827621393 0.548894464607005 0.958360293770273 1.02641972845176 1.45913774058872 1.50811173706869 1.94948827607495) (0.0462090787082577 0.43908432003951 0.564452582533386 0.938267239403997 1.04658249131212 1.43467215953867 1.53260886786687 1.92547645623973) (0.0691102159040715 0.420015536860367 0.584144708540881 0.915749746086578 1.06922078451581 1.41022612312792 1.55710983305973 1.90110410737744) (0.0917238673443257 0.399480768741238 0.605653162782479 0.892483769139075 1.09266692571585 1.38580829656309 1.58161025389159 1.87664635327897) (0.113863114251085 0.378567678109853 0.628026307077094 0.868958449423546 1.11644695897109 1.36143273910611 1.60610415581645 1.85216493367767) (0.135212561098235 0.357979431767488 0.650804940461758 0.845399327507095 1.14036437789844 1.33712597279413 1.63058104368944 1.82768870377694) (0.155193837618337 0.338479349371984 0.673671347997618 0.822003372220963 1.16428444411062 1.31294698795159 1.65501798584125 1.80324819761608) (0.172679547014293 0.321289854992632 0.696193190997784 0.799137496016584 1.18800188305626 1.28906327514362 1.67934881274624 1.77891315965595) (0.185502873728775 0.308627942742938 0.717034417258617 0.778101847588796 1.21076249234602 1.26620930567935 1.70326114132094 1.75499775017206) (0.19041596916807 0.303766163770653 0.728590051056376 0.766483258741005 1.22530241888082 1.25163924613768 1.72099865592632 1.73725912578793)))

(set! default-material air) ; don't screw up later tests

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(set! tolerance (* tolerance 10000))

)) ; if (not (using-mpi?))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Square lattice of dielectric rods in air.

(print
 "**************************************************************************\n"
 " Test case: Square lattice of dielectric rods in air.\n"
 "**************************************************************************\n"
)

(set! geometry (list
		(make cylinder (material (make dielectric (epsilon 11.56))) 
		      (center 0 0) (radius 0.2) (height infinity))))
(set! k-points (interpolate 4 (list (vector3 0) (vector3 0.5)
				    (vector3 0.5 0.5 0) (vector3 0))))
(set! grid-size (vector3 32 32 1))
(set! num-bands 8)

(run-te)
(check-freqs '((0.0 0.56194425757751 0.780841338858698 0.780844609384079 0.924370945946029 1.00803922648968 1.00803983466865 1.09858606820994) (0.0897997089296018 0.560208825943436 0.767784133427861 0.782436610927709 0.91260230701646 1.00888567082164 1.00949007371267 1.12115415949189) (0.178852624566495 0.553299942326149 0.732521316045145 0.786670763128744 0.890462229237357 1.01385614474981 1.0207793482333 1.11300318212822) (0.266123351700358 0.534864410198903 0.689375457294666 0.792047775151118 0.872924895754649 1.02090182242824 1.04285313199131 1.10753131624736) (0.349587649488828 0.494778955240383 0.65850757408903 0.796521826802555 0.862682546756807 1.02898016934648 1.0704358431079 1.10002933494514) (0.413344973506725 0.444622504506853 0.648671545672355 0.798263591389847 0.859326343743246 1.0331085059451 1.09580129492806 1.09741466623004) (0.424297754954621 0.448982360154965 0.644547886719657 0.802549318185324 0.85485206426883 0.989838869961377 1.05830669774359 1.11678889678951) (0.455353241643977 0.46116000446249 0.633229583006824 0.814780737365882 0.834249789018178 0.934557083246927 1.01274249020101 1.12366715080097) (0.47842659271384 0.501911542863864 0.617449085347795 0.784488364763741 0.833708766306268 0.906539937249672 0.967732605367803 1.12635473770671) (0.495603750250913 0.55686685887308 0.601738674729936 0.720583647470247 0.858430622782529 0.897770620991037 0.926609403084085 1.12761482054902) (0.503604934941629 0.594343453854288 0.594356066936635 0.679388329718917 0.883664684250016 0.895780374288292 0.895784882177603 1.12800902902937) (0.474670188885164 0.549916421071525 0.608031294203631 0.745033962833189 0.84835374603502 0.895852490752163 0.945889838077065 1.12707879976044) (0.37325364577533 0.543224118658017 0.646250145893324 0.817388491059739 0.830456349434008 0.896514619921478 1.01759996671208 1.12197450758083) (0.252369169108717 0.551072115277201 0.700803510708984 0.797550269910671 0.899584320559451 0.903388845643564 1.08791203699885 1.10098757579478) (0.126939924788208 0.558852625699953 0.755650003213234 0.785045707252181 0.90988302754884 0.968811931789054 1.048138069981 1.11331857879733) (0.0 0.561944257502533 0.780841339021966 0.780844609350807 0.924370946037259 1.00803922592411 1.008039834773 1.09858606811979)))

(run-tm)
(check-freqs '((0.0 0.550336048613976 0.5613370946588 0.561338209724234 0.822945614080313 0.86884031038663 0.965323797869396 1.08937764609563) (0.0651415604707116 0.525003374343187 0.561883290428932 0.586306505104102 0.823533574866317 0.867345176506021 0.954631111970521 1.05687608501249) (0.127664581350783 0.49364945366525 0.563320985421731 0.61731149148496 0.82273453813894 0.863528690374483 0.924304850459198 1.0388203664204) (0.18404626617351 0.461591792766672 0.56512008219092 0.651396317415505 0.810836794922065 0.858982862461561 0.892948196176091 1.03589039532843) (0.227777691946282 0.433360379013213 0.566594114569327 0.689044316062873 0.77879086922133 0.855423871128562 0.8793965443003 1.03874159892426) (0.245808613610412 0.42065702579991 0.56716166724927 0.720091507812628 0.747202214281867 0.854089232984633 0.877009967032735 1.04079529532332) (0.249298409024634 0.427307297772171 0.560219227899568 0.718024722979871 0.756121600184018 0.855012145559473 0.87710455189865 1.02916797941096) (0.258692959757849 0.44554050561804 0.543383913400337 0.711697335587534 0.779349430842947 0.858134752331172 0.877355120757762 1.00091937350513) (0.270962231010026 0.470322037223516 0.524051485235381 0.701395837199045 0.810962181290437 0.864392997244812 0.877681157930941 0.965106677642883) (0.281613255418747 0.493206541285337 0.508821881383743 0.689960343782336 0.846783438219078 0.874594673908117 0.87806644993597 0.926579642110255) (0.285905389343278 0.50298081266571 0.502981774043378 0.68447619406367 0.874356355798035 0.883317320234876 0.883317340578314 0.892992019942518) (0.276088425628325 0.491351577420453 0.508682484634622 0.692579576258017 0.839722616582581 0.856429424634476 0.907217562947494 0.907346022682546) (0.240238704962451 0.479229523080796 0.523497850599944 0.68536118087935 0.829265086081118 0.840448900775056 0.910790165990572 0.941594317697591) (0.175240093525383 0.488532797083896 0.541559620327371 0.647509257245384 0.830017383154389 0.850442051358689 0.922656007865983 0.98392407980674) (0.0915257771675455 0.516392862054612 0.55592268513554 0.601209990096617 0.824558882973928 0.865289101476991 0.948410220698457 1.0352619768163) (0.0 0.550336048534967 0.561337094658441 0.561338209720308 0.822945614076112 0.868840310374662 0.96532379781027 1.08937761987026)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Using the targeted solver to find a defect state in a 5x5 triangular
; lattice of rods.

(print
 "**************************************************************************\n"
 " Test case: 3x3 triangular lattice of rods in air, dipole defect states.\n"
 "**************************************************************************\n"
)

(set! geometry-lattice (make lattice (size 3 3 1)
                         (basis1 (/ (sqrt 3) 2) 0.5)
                         (basis2 (/ (sqrt 3) 2) -0.5)))
(set! k-points (list (vector3 0 0.5 0))) ; K
(set! geometry (list
		(make cylinder (material (make dielectric (epsilon 12))) 
		      (center 0 0) (radius 0.2) (height infinity))))
(set! geometry (geometric-objects-lattice-duplicates geometry))
(set! geometry (append geometry 
                       (list (make cylinder (center 0 0 0) 
                                   (radius 0.33) (height infinity)
                                  (material (make dielectric (epsilon 12)))))))
(set! grid-size (vector3 (* 16 5) (* 16 5) 1))
(set! num-bands 2)
(set! target-freq 0.35)
(run-tm)

(define ct-save check-tolerance)
(set! check-tolerance (* ct-save 10))
(check-freqs '((0.336270278778077 0.338821345064047)))
(set! check-tolerance ct-save)

(set! target-freq 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(print
 "**************************************************************************\n"
 " Test case: fcc lattice of air spheres in dielectric.\n"
 "**************************************************************************\n"
)

(set! geometry-lattice (make lattice
			 (basis1 0 1 1)
			 (basis2 1 0 1)
			 (basis3 1 1 0)))
(set! k-points (interpolate 1 (list
			       (vector3 0 0.5 0.5)            ; X
			       (vector3 0 0.625 0.375)        ; U
			       (vector3 0 0.5 0)              ; L
			       (vector3 0 0 0)                ; Gamma
			       (vector3 0 0.5 0.5)            ; X
			       (vector3 0.25 0.75 0.5)        ; W
			       (vector3 0.375 0.75 0.375))))  ; K
(set! geometry (list (make sphere (center 0) (radius 0.5) (material air))))
(set! default-material (make dielectric (epsilon 11.56)))
(set! grid-size (vector3 16 16 16))
(set! mesh-size 5)
(set! num-bands 10)
(run)
(check-freqs '((0.367330334200532 0.368631729560453 0.379250244708683 0.38009815959956 0.490764481898814 0.510460035555449 0.520299948985621 0.52163977441492 0.591058925208821 0.655980058956008) (0.365372112986101 0.374017703098236 0.38144963540168 0.384157767228998 0.468690962583923 0.504566333560446 0.521795505807199 0.52899706703094 0.606543236898035 0.640099600438518) (0.354536830265327 0.377236387120916 0.389299148276799 0.398154735182085 0.436431852065434 0.493041284992313 0.525772348514183 0.539014404139536 0.632555480464584 0.635276262002387) (0.320789954039426 0.328296003110865 0.395037409777138 0.39807536040462 0.460129445840545 0.512408734560943 0.53196372919329 0.544555032034677 0.626660436520514 0.63913443869362) (0.304696754453737 0.305705894338945 0.385268414302214 0.386525148688696 0.489355250632997 0.53456426232538 0.536127386181515 0.537133872614894 0.619981283480804 0.62338123756387) (0.17798868181981 0.178435079713327 0.470978700344625 0.47298459590555 0.501389132037197 0.534463870531001 0.536622243998802 0.539893299438634 0.619682881946492 0.622473455501479) (0.0 0.0 0.516837509757575 0.519494338020303 0.519504350986672 0.543591279457146 0.543598125101135 0.545732333342499 0.608034365365438 0.608747547654878) (0.205175019066526 0.205564920300304 0.47076750210839 0.472501961652333 0.504360955699242 0.5255030961835 0.528981589164918 0.530373685765904 0.600125579580231 0.650385552861123) (0.367330334171005 0.368631729529222 0.379250244712228 0.380098159591781 0.490764481842853 0.510460035546587 0.520299948977384 0.521639774384603 0.59105892520321 0.655980056139887) (0.369158518273583 0.373814756101566 0.382587852370655 0.389050520202432 0.460489122148551 0.50006474338479 0.503046496509613 0.54766933254652 0.617790900240892 0.630109412610147) (0.370505253171152 0.383024907271236 0.383107610443461 0.406221202324262 0.432583261237015 0.488802381549796 0.490128692816862 0.565919264899395 0.618936604071656 0.649254792587412) (0.360846750878278 0.379259186384437 0.386875644253879 0.402323859888739 0.435717072140011 0.491406885286304 0.503326669114097 0.558017137938326 0.625827006913157 0.641129957876957) (0.355708360010641 0.376691990228414 0.388176069478413 0.399170504802748 0.435557715266014 0.492920189355225 0.527258962121185 0.539364753193354 0.634114874295162 0.636034714938175)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(print
 "**************************************************************************\n"
 " Test case: simple cubic lattice with anisotropic dielectric.\n"
 "**************************************************************************\n"
)

(set! geometry-lattice (make lattice))
(set! default-material air)
(set! k-points (list (vector3 0) (vector3 0.5)
		     (vector3 0.5 0.5) (vector3 0.5 0.5 0.5)))
(set! grid-size (vector3 16 16 16))
(set! mesh-size 5)
(define hi-all (make dielectric (epsilon 12)))
(define hi-x (make dielectric-anisotropic (epsilon-diag 12 1 1)))
(define hi-y (make dielectric-anisotropic (epsilon-diag 1 12 1)))
(define hi-z (make dielectric-anisotropic (epsilon-diag 1 1 12)))
(set! geometry
	(list (make block (center 0) (size 0.313 0.313 1) (material hi-z))
	      (make block (center 0) (size 0.313 1 0.313) (material hi-y))
	      (make block (center 0) (size 1 0.313 0.313) (material hi-x))
	      (make block (center 0) (size 0.313 0.313 0.313) 
		    (material hi-all))))
(set! num-bands 3)
(run)
(check-freqs '((0.0 0.0 0.546634941994255) (0.259950663107253 0.259950714615222 0.444657179600192) (0.300691771998322 0.345673006360168 0.497691576333996) (0.36278154717783 0.362781589434725 0.502235919775543)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(display-eigensolver-stats)
(print "Relative error ranged from " min-err " to " max-err
	      ", with a mean of " (/ sum-err num-err) "\n")
(print "Absolute error ranged to " max-abs-err
	      ", with a mean of " (/ sum-abs-err num-err) "\n")
(print "PASSED all tests.\n")
