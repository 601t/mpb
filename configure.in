# Process this file with autoconf to produce a configure script.
AC_INIT(src/matrices/matrices.c)
AC_CONFIG_HEADER(src/config.h)

MPB_VERSION=1.0beta1
AC_SUBST(MPB_VERSION)

# set CFLAGS to -O3, unless the user has set the CFLAGS env. variable:
if test x = x"$CFLAGS"; then
	CFLAGS="-O3"
fi

# Use native f77 if present, since BLAS libraries are often compiled with
# this and there may be linking problems if we use a different compiler.
AC_MSG_CHECKING([for vendor's f77 to be used instead of g77])
AC_MSG_RESULT()
AC_CHECK_PROGS(F77, f77 xlf77 cf77 fort77 f90 xlf90)
AC_PROG_F77

# Get C compiler.
AC_MSG_CHECKING([for vendor's cc to be used instead of gcc])
AC_MSG_RESULT()
AC_CHECK_PROGS(CC, cc xlc) # prefer vendor cc, to stay in sync with Fortran
AC_PROG_CC

# Checks for programs.
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_MAKE_SET

# check how to transform the name of the installed program:
AC_ARG_PROGRAM

AC_ARG_ENABLE(single, [  --enable-single         compile for single precision], enable_single=$enableval, enable_single=no)
if test "$enable_single" = "yes"; then
        AC_DEFINE(SCALAR_SINGLE_PREC)
fi

AC_ARG_ENABLE(debug, [  --enable-debug          compile for debugging], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	CFLAGS="-g"
	AC_DEFINE(DEBUG)
fi

AC_ARG_ENABLE(debug-malloc, [  --enable-debug-malloc   use debug malloc/free], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	AC_DEFINE(DEBUG_MALLOC)
fi

AC_ARG_ENABLE(prof, [  --enable-prof           compile for profiling], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	CFLAGS="$CFLAGS -pg"
	AC_DEFINE(ENABLE_PROF)
fi

AC_ARG_ENABLE(checks, [  --disable-checks        disable runtime checks], ok=$enableval, ok=yes)
if test "$ok" = "no"; then
	AC_DEFINE(CHECK_DISABLE)
fi

BUILD_MPB_DATA=mpb-data  # mpb-data program to build, if any
AC_SUBST(BUILD_MPB_DATA)

AC_ARG_WITH(inv-symmetry,[  --with-inv-symmetry     take advantage of (and require) inv. sym.], inv_sym=$withval, inv_sym=no)
if test "$inv_sym" = "no"; then
        AC_DEFINE(SCALAR_COMPLEX)
	SCALAR_TYPE=complex
else
	SCALAR_TYPE=real
	# Make installed program mpbi instead of mpb, but don't change mpb-data
	program_transform_name='s,^mpb$$,mpbi,'";$program_transform_name"
fi
AC_SUBST(SCALAR_TYPE)

AC_ARG_WITH(hermitian-epsilon,[  --with-hermitian-epsilon     allow complex-Hermitian dielectric tensors], hermitian_epsilon=$withval, hermitian_epsilon=no)
if test "$hermitian_epsilon" = "yes"; then
        AC_DEFINE(WITH_HERMITIAN_EPSILON)
fi

# Add lots of compiler warnings to check for if we are using gcc:
# (The variable $GCC is set to "yes" by AC_PROG_CC if we are using gcc.)
if test "$GCC" = "yes"; then
	CFLAGS="$CFLAGS -Wall -W -Wbad-function-cast -Wcast-qual -Wpointer-arith -Wcast-align -pedantic"
fi

# ----------------------------------------------------------------------
#                       Checks for libraries:
# ----------------------------------------------------------------------

AC_ARG_WITH(efence, [  --with-efence           use ElectricFence library], ok=$withval, ok=no)
if test "$ok" = "yes"; then
	AC_CHECK_LIB(efence, malloc)
fi

# ----------------------------------------------------------------------
AC_CHECK_LIB(m, sqrt)

# If we have a Fortran compiler, link to its libraries, since these
# are probably needed to link with the BLAS/LAPACK libraries.
if test x != x"$F77"; then
	AC_F77_LIBRARY_LDFLAGS
	LIBS="$LIBS $FLIBS"
fi

# ----------------------------------------------------------------------
# In principle, we should abort if some of the following libraries are
# missing, or perhaps only compile some of the subdirectories.  For now,
# though, we do nothing (and wait for the compilation errors).

# ----------------------------------------------------------------------
# Check for FFTW libraries
if test "$enable_single" = "yes"; then
	AC_CHECK_LIB(sfftw, fftw)
	if test x"$inv_sym" = xyes; then
		AC_CHECK_LIB(srfftw, rfftw)
	fi
else
	AC_CHECK_LIB(dfftw, fftw)
	if test x"$inv_sym" = xyes; then
		AC_CHECK_LIB(drfftw, rfftw)
	fi
fi

if test x = x"`echo $LIBS | egrep 'l[[ds]]fftw'`"; then
	AC_CHECK_LIB(fftw, fftw)
	if test x"$inv_sym" = xyes; then
		AC_CHECK_LIB(rfftw, rfftw)
	fi
fi

# ----------------------------------------------------------------------
# Checks for BLAS libraries:

# Generic BLAS:
AC_CHECK_LIB(blas, main)

# remember current libs, so we can check if any libs were found below.
save_LIBS="$LIBS"

AC_ARG_WITH(fastblas, [  --without-fastblas      don't use accelerated BLAS], ok=$withval, ok=yes)
if test "$ok" = "no"; then
	save_LIBS="xxxxxxxx"
elif test "$ok" != "yes"; then
	# user specified a BLAS library to try on the command line
	AC_CHECK_LIB($ok, main)
fi

if test "$save_LIBS" = "$LIBS"; then
	# BLAS in Alpha CXML library?
	AC_CHECK_LIB(cxml, dgemm_)
fi

if test "$save_LIBS" = "$LIBS"; then
	# BLAS in Alpha DXML library? (now called CXML, see above)
	AC_CHECK_LIB(dxml, dgemm_)
fi

if test "$save_LIBS" = "$LIBS"; then
	if test "x$GCC" != xyes; then
		# Check for BLAS in Sun Performance library:
		# AC_CHECK_LIB(SUNWPro_lic, __lsp_rethread_mn_ph_)
		AC_CHECK_LIB(sunmath, acosp,
			AC_CHECK_LIB(sunperf, dgemm_,
        			[LIBS="-xlic_lib=sunperf -lsunmath $LIBS"
				 AC_DEFINE(HAVE_LIBSUNPERF)], , -lsunmath))
	fi
fi

if test "$save_LIBS" = "$LIBS"; then
	# Check for BLAS in SCSL and SGIMATH libraries (prefer SCSL):
	AC_CHECK_LIB(scs, dgemm_,
	             LIBS="-lscs $LIBS", 
		     AC_CHECK_LIB(complib.sgimath, dgemm_))
fi

if test "$save_LIBS" = "$LIBS"; then
	# Checks for BLAS in IBM ESSL library
	AC_CHECK_LIB(essl, dgemm)
fi

if test "$save_LIBS" = "$LIBS"; then
	# Checks for ATLAS BLAS library:
	AC_CHECK_LIB(atlas, ATL_xerbla)
	if test "$save_LIBS" != "$LIBS"; then
		# check for other atlas libs:
		AC_CHECK_LIB(cblas, cblas_dgemm)
		AC_CHECK_LIB(f77blas, main)
	fi
fi

if test "$save_LIBS" = "$LIBS"; then
	# Checks for BLAS dgemm/sgemm libraries (produced by PhiPACK):
	AC_CHECK_LIB(dgemm, main)
	AC_CHECK_LIB(sgemm, main)
fi

if test "$save_LIBS" = "$LIBS"; then
	# Optimized BLAS for Pentium Pro (from ASCII Red project):
	# (see http://www.cs.utk.edu/~ghenry/distrib/)
	AC_CHECK_LIB(blasppro1.1o,main)
fi

# ----------------------------------------------------------------------
# Checks for LAPACK library
AC_CHECK_LIB(lapack, main)

# check for ATLAS LAPACK replacements functions:
if test x != x"`echo $LIBS | grep atlas`"; then
	AC_CHECK_LIB(atlaslapack, main)
fi

# ----------------------------------------------------------------------
# Check for MPI library

AC_ARG_WITH(mpi, [  --with-mpi          enable MPI parallelization], with_mpi=$withval, with_mpi=no)

if test "x$with_mpi" = "xyes"; then
	AC_CHECK_PROGS(MPICC, mpicc hcc mpcc, $CC)
        CC="$MPICC"
        if test x = x"$MPILIBS"; then
                AC_CHECK_FUNC(MPI_Init, [MPILIBS=" "])
        fi
        if test x = x"$MPILIBS"; then
                AC_CHECK_LIB(mpi, MPI_Init, [MPILIBS="-lmpi"])
        fi

        if test x = x"$MPILIBS"; then
                AC_MSG_ERROR(couldn't find mpi library for --with-mpi)
	fi

	LIBS="$MPILIBS $LIBS"

	# Make installed program mpb_mpi instead of mpb
        if test x"$inv_sym" = xyes; then
	        program_transform_name='s,^mpb$$,mpbi-mpi,'";$program_transform_name"
	else
	        program_transform_name='s,^mpb$$,mpb-mpi,'";$program_transform_name"
	fi

	# Check for fftw_mpi library.
	if test "$enable_single" = "yes"; then
        	AC_CHECK_LIB(sfftw_mpi, fftwnd_mpi)
	        if test x"$inv_sym" = xyes; then
	                AC_CHECK_LIB(srfftw_mpi, rfftwnd_mpi)
	        fi
	else
	        AC_CHECK_LIB(dfftw_mpi, fftwnd_mpi)
	        if test x"$inv_sym" = xyes; then
	                AC_CHECK_LIB(drfftw_mpi, rfftwnd_mpi)
	        fi
	fi
	if test x = x"`echo $LIBS | egrep 'l[[ds]]fftw_mpi'`"; then
       		AC_CHECK_LIB(fftw_mpi, fftwnd_mpi)
	        if test x"$inv_sym" = xyes; then
	                AC_CHECK_LIB(rfftw_mpi, rfftwnd_mpi)
	        fi
	fi
	if test x = x"`echo $LIBS | egrep 'l[[ds]]*fftw_mpi'`"; then
		AC_MSG_ERROR(couldn't find fftw_mpi library for --with-mpi)
	fi

	AC_DEFINE(HAVE_MPI,1,[Define if you have & link an MPI library.])

	BUILD_MPB_DATA="" # don't build/install MPI-linked mpb-data
fi

# ----------------------------------------------------------------------
# Check for HDF5 library
AC_ARG_WITH(hdf5, [  --without-hdf5          don't use HDF5 output], ok=$withval, ok=yes)
if test "$ok" = "yes"; then
	AC_CHECK_LIB(z, deflate)
	AC_CHECK_LIB(hdf5, H5Pcreate, [
		AC_CHECK_HEADERS(hdf5.h, [LIBS="-lhdf5 $LIBS"
			                    AC_DEFINE(HAVE_HDF5)],
			         AC_MSG_WARN([**** Did you forget to set CPPFLAGS for HDF5? ***]))])

        if test x != x"$MPILIBS"; then
		AC_MSG_CHECKING([for H5Pset_mpi])
		AC_TRY_LINK([#include <mpi.h>
#include <hdf5.h>],
		[H5Pset_mpi(H5P_DEFAULT, MPI_COMM_WORLD, MPI_INFO_NULL);],
		ok=yes, ok=no)
		AC_MSG_RESULT($ok)
		if test "x$ok" = xyes; then
			AC_DEFINE(HAVE_H5PSET_MPI)
		fi
	fi
fi

# ----------------------------------------------------------------------
# Check for Guile library and flags:

AC_CHECK_PROG(HAVE_GUILE_CONFIG, guile-config, yes, no)
if test "$HAVE_GUILE_CONFIG" = "yes"; then
        CPPFLAGS="$CPPFLAGS `guile-config compile`"
        LIBS="`guile-config link` $LIBS"
	AC_MSG_CHECKING([if linking to guile works])
	AC_TRY_LINK_FUNC(gh_enter, AC_MSG_RESULT(yes), [
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(guile-config is broken)
	])
else
        AC_CHECK_LIB(readline, readline)
        AC_CHECK_LIB(dl, dlopen)
        AC_CHECK_LIB(guile, gh_eval_str)
fi

# Check how to activate Guile readline support:

ACTIVATE_READLINE=""
AC_MSG_CHECKING(how to activate readline in Guile)
ractivate="(use-modules (readline-activator)) (activate-readline)"
if guile -c "$ractivate" > /dev/null 2>&1; then
	AC_MSG_RESULT(readline-activator)
	ACTIVATE_READLINE="$ractivate"
else
	ractivate="(use-modules (ice-9 readline)) (activate-readline)"
	if guile -c "$ractivate" >& /dev/null; then
	        AC_MSG_RESULT(ice-9 readline)
	        ACTIVATE_READLINE="$ractivate"
	else
		AC_MSG_RESULT(cannot)
		ACTIVATE_READLINE=""
	fi
fi
AC_SUBST(ACTIVATE_READLINE)

# ----------------------------------------------------------------------
# Check for libctl library and files

AC_ARG_WITH(libctl, [  --with-libctl=<dir>     specify libctl directory], ok=$withval, ok=yes)
if test "$ok" = "no"; then
        AC_ERROR(libctl is required and you may not disable it)
elif test "$ok" != "yes"; then
	LIBCTL_DIR="$ok"
fi

AC_MSG_CHECKING([for libctl dir])
if test x != x"$LIBCTL_DIR" -a ! -r "$LIBCTL_DIR/base/ctl.scm"; then
	LIBCTL_DIR=""
fi
if test x = x"$LIBCTL_DIR" -a -r /usr/local/share/libctl/base/ctl.scm; then
	LIBCTL_DIR="/usr/local/share/libctl"
fi
if test x = x"$LIBCTL_DIR" -a -r /usr/share/libctl/base/ctl.scm; then
        LIBCTL_DIR="/usr/share/libctl"
fi
if test x = x"$LIBCTL_DIR"; then
	AC_ERROR([could not find libctl files; use --with-libctl=<dir>])
fi
AC_MSG_RESULT($LIBCTL_DIR)
AC_SUBST(LIBCTL_DIR)

AC_CHECK_PROG(gen_ctl_io_ok, gen-ctl-io, yes, no)
if test x"$gen_ctl_io_ok" = xno; then
	AC_ERROR([could not find gen-ctl-io program; check your PATH])
fi

GEN_CTL_IO=gen-ctl-io
AC_SUBST(GEN_CTL_IO)

# check for -lctl:
AC_CHECK_LIB(ctl, ctl_get_vector3)

# ----------------------------------------------------------------------
# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h getopt.h)

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE

# Checks for library functions.
AC_CHECK_FUNCS(getopt strncmp)

# ----------------------------------------------------------------------
# Check to see if calling Fortran functions (in particular, the BLAS
# complex dot product functions) works from C:

AC_MSG_CHECKING([whether calling BLAS zdotc works])
AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
#include "$srcdir/src/util/fortranize.h"
typedef struct { double re, im; } cmplx;
#define zdotc FORTRANIZE(zdotc,ZDOTC)
#ifdef __cplusplus
extern "C"
#endif
extern cmplx zdotc(int *, cmplx *, int *, cmplx *, int *);
int main(void) {
     cmplx x[2] = { {1,0}, {0,1} }, y[2] = { {1,0}, {1,0} };
     int n = 2, inc1 = 1, inc2 = 1;
     cmplx result = { 0, 0 };
     result = zdotc(&n, x, &inc1, y, &inc2);
     if (result.re != 1 || result.im != -1) return EXIT_FAILURE;
     else return EXIT_SUCCESS;
}
], ok="yes", ok="no", ok="no")
AC_MSG_RESULT($ok)
if test "$ok" = "no"; then
	AC_DEFINE(NO_FORTRAN_FUNCTIONS)
fi

# ----------------------------------------------------------------------

# grab the various EIGS_ flags from eigensolver.h and substitute them
# into mpb.scm.in (aren't regular expressions fun?):
# (note that autoconf gets unhappy if we have newlines; we must delete them)
EIGS_FLAGS_SCM=`grep '#define EIGS_' $srcdir/src/matrices/eigensolver.h |sed 's/#define \([A-Za-z0-9_]*\) (1<<\([0-9]*\))/(define \1 (pow2 \2))/' |sed 's/#define \([A-Za-z0-9_]*\) (\(.*\))/(define \1 (+ \2))/' |sed 's/ *| */ /g' | tr -d '\n'`
AC_SUBST(EIGS_FLAGS_SCM)

# ----------------------------------------------------------------------

AC_OUTPUT(Makefile tests/Makefile src/util/Makefile src/matrices/Makefile src/matrixio/Makefile src/maxwell/Makefile mpb-ctl/Makefile mpb-ctl/mpb.scm utils/Makefile)
