dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/matrices/matrices.c)
AC_CONFIG_HEADER(src/config.h)

AC_ARG_ENABLE(single, [  --enable-single         compile for single precision], enable_single=$enableval, enable_single=no)
if test "$enable_single" = "yes"; then
        AC_DEFINE(SCALAR_SINGLE_PREC)
fi

AC_ARG_ENABLE(complex, [  --disable-complex       don't use complex numbers (require inv. sym.)], ok=$enableval, ok=yes)
if test "$ok" = "yes"; then
        AC_DEFINE(SCALAR_COMPLEX)
fi

# Use native f77 if present
AC_MSG_CHECKING([for vendor's f77 to be used instead of g77])
AC_MSG_RESULT()
AC_CHECK_PROGS(F77, f77 xlf77 cf77 fort77 f90 xlf90 g77)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_MAKE_SET

CFLAGS="-O3"

AC_ARG_ENABLE(debug, [  --enable-debug          compile for debugging], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	CFLAGS="-g"
	AC_DEFINE(DEBUG)
fi

AC_ARG_ENABLE(prof, [  --enable-prof           compile for profiling], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	CFLAGS="$CFLAGS -pg"
	AC_DEFINE(ENABLE_PROF)
fi

AC_ARG_ENABLE(checks, [  --disable-checks        disable runtime checks], ok=$enableval, ok=yes)
if test "$ok" = "no"; then
	AC_DEFINE(CHECK_DISABLE)
fi

AC_ARG_WITH(fftw, [  --with-fftw=<dir>       specify fftw directory], ok=$withval, ok=yes)
if test "$ok" = "no"; then
        AC_ERROR(FFTW is required and you may not disable it)
elif test "$ok" != "yes"; then
	CFLAGS="$CFLAGS -I$ok"
	LDFLAGS="$LDFLAGS -L$ok"
fi

# Add path for config.h to include path:
CFLAGS="$CFLAGS -I`pwd`/src"

# Add lots of compiler warnings to check for if we are using gcc:
# (The variable $GCC is set to "yes" by AC_PROG_CC if we are using gcc.)
if test "$GCC" = "yes"; then
	CFLAGS="$CFLAGS -Wall -W -Wcast-qual -Wpointer-arith -Wcast-align -pedantic"
fi

dnl Checks for libraries.
AC_CHECK_LIB(m, sqrt)

AC_F77_LIBRARY_LDFLAGS

dnl ----------------------------------------------------------------------
dnl In principle, we should abort if some of the following libraries are
dnl missing, or perhaps only compile some of the subdirectories.  For now,
dnl though, we do nothing (and wait for the compilation errors).

dnl ----------------------------------------------------------------------
dnl Check for FFTW libraries
if test "$enable_single" = "yes"; then
	AC_CHECK_LIB(sfftw, fftw)
	AC_CHECK_LIB(srfftw, rfftw)
else
	AC_CHECK_LIB(dfftw, fftw)
	AC_CHECK_LIB(drfftw, rfftw)
fi

if test -z "`echo $LIBS | grep fftw`"; then
	AC_CHECK_LIB(fftw, fftw)
	AC_CHECK_LIB(rfftw, rfftw)
fi

dnl ----------------------------------------------------------------------
dnl Checks for BLAS libraries:

dnl Generic BLAS:
AC_CHECK_LIB(blas, main)

dnl Checks for BLAS dgemm/sgemm libraries (produced by PhiPACK):
AC_CHECK_LIB(dgemm, main)
AC_CHECK_LIB(sgemm, main)

dnl Optimized BLAS for Pentium Pro?
AC_CHECK_LIB(blasppro1,main)

dnl BLAS in Alpha DXML library?
AC_CHECK_LIB(dxml, dgemm_)
AC_CHECK_LIB(for, for_stop)

dnl Check for BLAS in Sun Performance library:
dnl AC_CHECK_LIB(SUNWPro_lic, __lsp_rethread_mn_ph_)
AC_CHECK_LIB(sunmath, acosp)
AC_CHECK_LIB(F77, ishft_)
AC_CHECK_LIB(f90, _F90_STOP)
AC_CHECK_LIB(sunperf, dgemm_,
        [LIBS="-xlic_lib=sunperf $LIBS"; AC_DEFINE(HAVE_LIBSUNPERF)])
AC_CHECK_LIB(M77, __pow_ri)

dnl Check for BLAS in SGIMATH library:
AC_CHECK_LIB(complib.sgimath, dgemm)

dnl Checks for BLAS in IBM ESSL library
AC_CHECK_LIB(essl, dgemm)

dnl ----------------------------------------------------------------------
dnl Checks for LAPACK library
AC_CHECK_LIB(lapack, main)

dnl ----------------------------------------------------------------------
dnl Check for HDF5 library
AC_CHECK_LIB(z, deflate)
AC_CHECK_LIB(hdf5, H5Pcreate)
AC_CHECK_HEADERS(hdf5.h)

dnl ----------------------------------------------------------------------
dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h getopt.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE

dnl Checks for library functions.
AC_CHECK_FUNCS(getopt)

dnl ----------------------------------------------------------------------
dnl Check to see if calling Fortran functions (in particular, the BLAS
dnl complex dot product functions) works from C:

AC_MSG_CHECKING([whether calling BLAS zdotc works])
AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
#include "$srcdir/src/util/fortranize.h"

typedef struct {
     double re, im;
} cmplx;

#define zdotc FORTRANIZE(zdotc,ZDOTC)
#ifdef __cplusplus
extern "C"
#endif
extern cmplx zdotc(int *, cmplx *, int *, cmplx *, int *);

int main(void)
{
     cmplx x[2] = { {1,0}, {0,1} }, y[2] = { {1,0}, {1,0} };
     int n = 2, inc1 = 1, inc2 = 1;
     cmplx result = { 0, 0 };

     result = zdotc(&n, x, &inc1, y, &inc2);
     if (result.re != 1 || result.im != -1)
          return EXIT_FAILURE;
     else
          return EXIT_SUCCESS;
}
], ok="yes", ok="no", ok="no")
AC_MSG_RESULT($ok)
if test "$ok" = "no"; then
	AC_DEFINE(NO_FORTRAN_FUNCTIONS)
fi

dnl ----------------------------------------------------------------------

AC_OUTPUT(Makefile tests/Makefile src/util/Makefile src/matrices/Makefile src/matrixio/Makefile src/maxwell/Makefile photon-ctl/Makefile)
